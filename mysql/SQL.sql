/* Modelagem Básica */

/*ENTIDADE = TABELA*/
/*ATRIBUTOS = ATRIBUTOS*/

/*TABELA*/CLIENTE

NOME - CARACTER(30)
CPF - NUMERICO(11)
EMAIL - CARACTER(30)
TELEFONE - CARACTER(30)
ENDERECO - CARACTER(100)
SEXO - CARACTER(1)

/*PROCESSOS DE MODELAGEM */

/* FASE 01 E FASE 02 - AD ADM DE DADOS*/

MODELAGEM CONCEITUAL - RASCUNHO
MODELAGEM LOGICA - QUALQUER PROGRAMA DE MODELAGEM

/* FASE 3 - DBA / AD */

MODELAGEM FISICA - 

/*INICIANDO A MODELAGEM FISICA*/

/*CRIANDO O BANCO DE DADOS*/

CREATE DATABASE PROJETO;

/*CONECTANDO-SE AO BANCO*/

USE PROJETO;

/*CRIANDO A TABELA DE CLIENTES*/

CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100)
);

/*VERIFICANDO AS TABELAS CRIADAS*/

SHOW TABLES;

/*DESCOBRINDO COMO É A ESTRUTURA DE UMA TABELA*/

DESC CLIENTE;

/*SINTAXE BASICA DE INSERÇÃO*/

/*INSERT COM AS COLUNAS*/

INSERT INTO CLIENTE (NOME,SEXO,EMAIL,CPF,TELEFONE,ENDERECO) VALUES ('LILIAN','F','LILIAN@GMAIL.COM',01751256006,'22545878','RESENDE - RIO')


/*SEM AS COLUNAS*/
INSERT INTO CLIENTE VALUES ('JOAO','M','JOAO@HMAIL.COM',988838273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');
INSERT INTO CLIENTE VALUES ('MARIA','F','MARIA@HMAIL.COM',988838273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');


/*COMANDO SELECT
SELECAO, PROJECAO E JUNCAO
*/

SELECT NOME AS CLIENTES, SEXO, EMAIL FROM CLIENTE;

/*OPERADORES LÓGICOS
OR -> PARA QUE A SAIDA SEJA VERDADEIRA UMAS DAS CONDICOES PRECISA SER VERDADEIRA
AND -> PARA QUE A SAÍDA SEJA VERDADEIRA AMBAS PRECISAM SER VERDADEIRAS
*/

/* OR */

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE SEXO = 'M' OR ENDERECO LIKE '%RJ';

/* AND */

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE SEXO = 'M' AND ENDERECO LIKE '%RJ';


/* COUNT, GROUP BY */

/*CONTANDO OS REGISTROS DE UMA TABELA*/

SELECT COUNT(*) AS TOTAL_REGISTROS
 FROM CLIENTE;
 
 /*OPERADOR GROUP BY*/
 
 SELECT SEXO, COUNT(*)
 FROM CLIENTE
 GROUP BY SEXO;

/*FILTRANDO VALORES NULOS*/

SELECT NOME, SEXO 
FROM CLIENTE
WHERE EMAIL IS NULL;  /*USAMOS A LINGUAGEM NATURAL*/

/*UTILIZANDO O UPDATE PARA ATUALIZAR VALORES*/

UPDATE CLIENTE 
SET EMAIL = 'LILIAN@HOTMAIL.COM'
WHERE NOME = 'LILIAN';

/*DELETANDO REGISTROS COM A CLAUSULA DELETE*/

DELETE FROM CLIENTE WHERE NOME = 'LILIAN';

/*PRIMEIRA FORMA NORMAL

1 - TODO CAMPO VETORIZADO SE TORNARÁ OUTRA TABELA

[AMARELO, AZUL LARANJA] -> CORES
[KA, FIESTA, UNO, CIVIC] -> CARROS

2 - TODO CAMPO MULTIVALORADO SE TORNARÁ OUTRA TABELA OU QUANDO FOR DIVISIVEL

3 - TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE IDENTIFIQUE TODO O REGISTRO COMO SENDO ÚNICO
CHAMAMOS DE CHAVE PRIMÁRIA OU PRIMARY KEY (ID)

*/

/*CARDINALIDADE

(0,N) - > 0 É OPCIONAL | 1 É OBRIGATÓRIO

(1,N) -> N PODE TER VARIOS DADOS | 1 SOMENTE UM CAMPO PODE SER INFORMADO

*/

CREATE DATABASE COMERCIO;

USE COMERCIO;

DROP TABLE CLIENTE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	EMAIL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE ENDERECO (
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE TELEFONE (
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('RES','COM','CEL') NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

/*ENDERECO - OBRIGATÓRIO
CADASTRO DE SOMENTE UM

TELEFONE -NÃO OBRIGATÓRIO
CADASTRO DE MAIS DE UM (OPCIONAL)
*/

/*
CHAVE ESTRANGEIRA É A CHAVE PRIMARIA DE UMA TABELA QUE VAI ATÉ
A OUTRA TABELA PARA FAZER REFERENCIA
*/

/*EM RELACIONAMENTO 1 X 1 A FK FICA NA TABELA MAIS FRACA*/

/*EM RELACIONAMENTO 1 X N A FK FICA NA TABELA COM CARDINALIDADE N*/

/*INSERINDO DADOS NA TABELA DE CLIENTES*/
INSERT INTO CLIENTE VALUES(NULL,'JOAO','M','JOAO@LIVE.COM','45454545455');
INSERT INTO CLIENTE VALUES(NULL,'CARLOS','M','CARLOS@LIVE.COM','454512211');
INSERT INTO CLIENTE VALUES(NULL,'ANA','F',NULL,'123456456');
INSERT INTO CLIENTE VALUES(NULL,'CLARA','F','CLARA@LIVE.COM','8989897777');

SELECT * FROM CLIENTE;

+-----------+--------+------+-----------------+-------------+
| IDCLIENTE | NOME   | SEXO | EMAIL           | CPF         |
+-----------+--------+------+-----------------+-------------+
|         1 | JOAO   | M    | JOAO@LIVE.COM   | 45454545455 |
|         2 | CARLOS | M    | CARLOS@LIVE.COM | 454512211   |
|         3 | ANA    | F    | NULL            | 123456456   |
|         4 | CLARA  | F    | CLARA@LIVE.COM  | 8989897777  |
+-----------+--------+------+-----------------+-------------+

/*INSERINDO DADOS NA TABELA DE ENDERECO*/
INSERT INTO ENDERECO VALUES (NULL,'RUA ANTONIO SA','CENTRO','B. HORIZONTE','MG',4);
INSERT INTO ENDERECO VALUES (NULL,'RUA ZAP','CELULA','PORTO ALEGRE','RS',1);
INSERT INTO ENDERECO VALUES (NULL,'RUA PASSARO','VELHO','FLORIANOPOLIS','SC',3);
INSERT INTO ENDERECO VALUES (NULL,'RUA GALVAO','NOVO','CURITIBA','PR',2);

+------------+----------------+--------+----------------+--------+------------+
| IDENDERECO | RUA            | BAIRRO | CIDADE         | ESTADO | ID_CLIENTE |
+------------+----------------+--------+----------------+--------+------------+
|          1 | RUA ANTONIO SA | CENTRO | BELO HORIZONTE | MG     |          4 |
|          2 | RUA ZAP        | CELULA | PORTO ALEGRE   | RS     |          1 |
|          3 | RUA PASSARO    | VELHO  | FLORIANOPOLIS  | SC     |          3 |
|          4 | RUA GALVAO     | NOVO   | CURITIBA       | PR     |          2 |
+------------+----------------+--------+----------------+--------+------------+

/*INSERINDO DADOS NA TABELA DE TELEFONE*/
INSERT INTO TELEFONE VALUES(NULL, 'CEL','777777777',4);
INSERT INTO TELEFONE VALUES(NULL, 'RES','88888888',4);
INSERT INTO TELEFONE VALUES(NULL, 'COM','9999999',2);
INSERT INTO TELEFONE VALUES(NULL, 'RES','111111111',3);
INSERT INTO TELEFONE VALUES(NULL, 'CEL','777777777',1);
INSERT INTO TELEFONE VALUES(NULL, 'COM','222222222',3);
INSERT INTO TELEFONE VALUES(NULL, 'RES','555555555',1);

/*SELECAO, PROJECAO E JUNCAO*/

/*PROJECAO -> É TUDO QUE VOCÊ QUER VER NA TELA*/

SELECT NOW() AS DATA_ATUAL;

SELECT 2 + 2 AS SOMA, NOME, NOW() AS DATA
FROM CLIENTE;

/*SELECAO - > É UM SUBCONJUNTO DO CONJUNTO TOTAL DE REGISTROS DE UMA TAEBLA A CLAUSULA DE SELECAO É O WHERE*/

SELECT NOME, SEXO,EMAIL /*PROJECAO*/
FROM CLIENTE /*ORIGEM*/
WHERE SEXO = 'F'; /*SELECAO*/

/*JUNCAO ->JOIN*/

SELECT NOME, EMAIL, IDCLIENTE
FROM CLIENTE;

SELECT ID_CLIENTE, BAIRRO, CIDADE
FROM ENDERECO;

+--------+-----------------+-----------+                     
| NOME   | EMAIL           | IDCLIENTE |
+--------+-----------------+-----------+                 
| JOAO   | JOAO@LIVE.COM   |         1 |                  
| CARLOS | CARLOS@LIVE.COM |         2 |
| ANA    | NULL            |         3 |                  
| CLARA  | CLARA@LIVE.COM  |         4 |
+--------+-----------------+-----------+                  

+------------+--------+----------------+
| ID_CLIENTE | BAIRRO | CIDADE         |
+------------+--------+----------------+
|          4 | CENTRO | BELO HORIZONTE |
|          1 | CELULA | PORTO ALEGRE   |
|          3 | VELHO  | FLORIANOPOLIS  |
|          2 | NOVO   | CURITIBA       |
+------------+--------+----------------+

/*NOME, SEXO, BAIRRO E CIDADE*/

SELECT NOME, SEXO, BAIRRO, CIDADE /*PROJECAO*/
FROM CLIENTE, ENDERECO/*ORIGEM*/*/
WHERE IDCLIENTE = ID_CLIENTE; /*JUNCAO*/

+--------+------+--------+----------------+
| NOME   | SEXO | BAIRRO | CIDADE         |
+--------+------+--------+----------------+
| JOAO   | M    | CELULA | PORTO ALEGRE   |
| CARLOS | M    | NOVO   | CURITIBA       |
| ANA    | F    | VELHO  | FLORIANOPOLIS  |
| CLARA  | F    | CENTRO | BELO HORIZONTE |
+--------+------+--------+----------------+

SELECT NOME, SEXO, BAIRRO, CIDADE 
FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE 
AND SEXO = 'F';

SELECT NOME, SEXO, BAIRRO, CIDADE 
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE;

+--------+------+--------+----------------+
| NOME   | SEXO | BAIRRO | CIDADE         |
+--------+------+--------+----------------+
| JOAO   | M    | CELULA | PORTO ALEGRE   |
| CARLOS | M    | NOVO   | CURITIBA       |
| ANA    | F    | VELHO  | FLORIANOPOLIS  |
| CLARA  | F    | CENTRO | BELO HORIZONTE |
+--------+------+--------+----------------+

SELECT NOME, SEXO, BAIRRO, CIDADE /*PROJECAO*/
FROM CLIENTE /*ORIGEM*/
	INNER JOIN ENDERECO /*JUNCAO*/
	ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F'; /*SELECAO*/

/*NOME, SEXO, EMAIL, TIPO, NUMERO*/

SELECT NOME, SEXO, EMAIL, TIPO, NUMERO
FROM CLIENTE
INNER JOIN TELEFONE
ON IDCLIENTE = ID_CLIENTE;

/*NOME, SEXO, BAIRRO, CIDADE, TIPO, NUMERO
SELECIONANDO MAIS DE UMA TABELA COM O NOME DA TABELA MESMO*/

SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE
INNER JOIN ENDERECO
	ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
	ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

+--------+------+--------+----------------+------+-----------+
| NOME   | SEXO | BAIRRO | CIDADE         | TIPO | NUMERO    |
+--------+------+--------+----------------+------+-----------+
| JOAO   | M    | CELULA | PORTO ALEGRE   | CEL  | 777777777 |
| JOAO   | M    | CELULA | PORTO ALEGRE   | RES  | 555555555 |
| CARLOS | M    | NOVO   | CURITIBA       | COM  | 9999999   |
| ANA    | F    | VELHO  | FLORIANOPOLIS  | RES  | 111111111 |
| ANA    | F    | VELHO  | FLORIANOPOLIS  | COM  | 222222222 |
| CLARA  | F    | CENTRO | BELO HORIZONTE | CEL  | 777777777 |
| CLARA  | F    | CENTRO | BELO HORIZONTE | RES  | 88888888  |
+--------+------+--------+----------------+------+-----------+

/*SELECAO DE MAIS DE UMA TABELA COM ALIAS*/
SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE AS C
INNER JOIN ENDERECO AS E
	ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE AS T
	ON C.IDCLIENTE = T.ID_CLIENTE;
	
/*
	DML - DATA MANIPULATION LANGUAGE
	DDL - DATA DEFINITION LANGUAGE
	DCL - DATA CONTROL LANGUAGE
	TCL - TRANSACTION CONTROL LANGUAGE
*/

/* INSERT - DML*/

INSERT INTO CLIENTE VALUES(NULL,'PAULA','M',NULL,'444444444');
INSERT INTO ENDERECO VALUES(NULL, 'RUA JOAQUIM','ALVORADA','NITEROI','RJ',5);
SELECT * FROM CLIENTE;

/*FILTROS*/
UPDATE CLIENTE SET SEXO = 'F' WHERE IDCLIENTE = '5';

/*	DDL - DATA DEFINITION LANGUAGE

EXEMPLO DE DDL COM CREATE*/

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(30) NOT NULL,
	PRECO INT,
	FRETE FLOAT(10,2) NOT NULL
);

/*ALTER TABLE*
/*ALTERANDO NOME DE COLUNA COM - CHANGE*/

ALTER TABLE PRODUTO 
CHANGE PRECO VALOR_UNITARIO INT NOT NULL;

+----------------+-------------+------+-----+---------+----------------+
| Field          | Type        | Null | Key | Default | Extra          |
+----------------+-------------+------+-----+---------+----------------+
| IDPRODUTO      | int         | NO   | PRI | NULL    | auto_increment |
| NOME_PRODUTO   | varchar(30) | NO   |     | NULL    |                |
| VALOR_UNITARIO | int         | NO   |     | NULL    |                |
| FRETE          | float(10,2) | NO   |     | NULL    |                |
+----------------+-------------+------+-----+---------+----------------+

ALTER TABLE PRODUTO 
CHANGE VALOR_UNITARIO VALOR_UNITARIO INT; /*PRECISA REPETIR O NOME DO CAMPO*/

/*MODIFY - ALTERANDO O TIPO*/

ALTER TABLE PRODUTO
MODIFY VALOR_UNITARIO VARCHAR(50) NOT NULL; /*NAO PRECISA REPETIR O TIPO DO CAMPO*/

/*ADICIONANDO COLUNAS*/


ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL;

/*APAGANDO UMA COLUNA*/
ALTER TABLE PRODUTO
DROP COLUMN PESO;

/*ADICIONANDO COLUNA EM UMA ORDEM ESPECIFICA*/

ALTER TABLE PRODUTO 
ADD COLUMN PESO FLOAT(10,2) NOT NULL
AFTER NOME_PRODUTO; 

/*IFNULL - NOME, EMAIL NUMERO, ESTADO */
SELECT C.NOME, 
		IFNULL(C.EMAIL,'*******'), 
		E.ESTADO, 
		T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

+---------+---------------------------+--------+----------+
| NOME    | IFNULL(C.EMAIL,'*******') | ESTADO | NUMERO   |
+---------+---------------------------+--------+----------+
| JOAO    | JOAOA@IG.COM              | MG     | 78458743 |
| CARLOS  | CARLOSA@IG.COM            | RJ     | 56576876 |
| ANA     | ANA@IG.COM                | SP     | 87866896 |
| CLARA   | *******                   | RJ     | 54768899 |
| JORGE   | JORGE@IG.COM              | RJ     | 99667587 |
| CELIA   | JCELIA@IG.COM             | ES     | 78989765 |
| FLAVIO  | FLAVIO@IG.COM             | ES     | 99766676 |
| ANDRE   | ANDRE@GLOBO.COM           | ES     | 66687899 |
| GIOVANA | *******                   | MG     | 89986668 |
| KARLA   | KARLA@GMAIL.COM           | RJ     | 88687909 |
| DANIELE | DANIELE@GMAIL.COM         | RJ     | 33567765 |
| DANIELE | DANIELE@GMAIL.COM         | RJ     | 88668786 |
| DANIELE | DANIELE@GMAIL.COM         | RJ     | 55689654 |
| LORENA  | *******                   | RJ     | 88687979 |
| EDUARDO | *******                   | ES     | 88965676 |
|+---------+---------------------------+--------+----------+

SELECT C.NOME, 
		IFNULL(C.EMAIL,'*******') as 'EMAIL', 
		E.ESTADO, 
		T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

+---------+-------------------+--------+----------+  
| NOME    | EMAIL             | ESTADO | NUMERO   |
+---------+-------------------+--------+----------+
| JOAO    | JOAOA@IG.COM      | MG     | 78458743 |
| CARLOS  | CARLOSA@IG.COM    | RJ     | 56576876 |
| ANA     | ANA@IG.COM        | SP     | 87866896 |
| CLARA   | *******           | RJ     | 54768899 |
| JORGE   | JORGE@IG.COM      | RJ     | 99667587 |
| CELIA   | JCELIA@IG.COM     | ES     | 78989765 |
| FLAVIO  | FLAVIO@IG.COM     | ES     | 99766676 |
| ANDRE   | ANDRE@GLOBO.COM   | ES     | 66687899 |
| GIOVANA | *******           | MG     | 89986668 |
| KARLA   | KARLA@GMAIL.COM   | RJ     | 88687909 |
| DANIELE | DANIELE@GMAIL.COM | RJ     | 33567765 |
| DANIELE | DANIELE@GMAIL.COM | RJ     | 88668786 |
| DANIELE | DANIELE@GMAIL.COM | RJ     | 55689654 |
| LORENA  | *******           | RJ     | 88687979 |
| EDUARDO | *******           | ES     | 88965676 |
| ANTONIO | ANTONIO@UOL.COM   | PR     | 89966809 |
+---------+-------------------+--------+----------+

/*VIEWS*/

SELECT  C.NOME, 
		C.SEXO, 
		C.EMAIL, 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C 
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;

/*CRIANDO O VIEW*/

CREATE VIEW RELATORIO AS
SELECT  C.NOME, 
		C.SEXO, 
		C.EMAIL, 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C 
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;

SELECT * FROM RELATORIO;


/*PARA MOSTRAR A VIEW É USADO O SHOW TABLES*/

/*INSERINDO UM PREFIXO*/

CREATE VIEW V_RELATORIO AS
SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL,'') AS 'EMAIL', 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C 
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;


/*SELECT A PARTIR DE UMA VIEW*/
SELECT NOME, NUMERO, ESTADO
FROM V_RELATORIO;

/*UPDATE, INSERT E DELETE - DML EM VIEWS*/

INSERT INTO V_RELATORIO VALUES(
'ANDREIA','F','ANDREIA@UIOL.COM','CEL','4444444444','CENTRO','VITORIA','ES'
);
Can not insert into join view 'comercio.v_relatorio' without fields list

/*É PERMITIDO FAZER UPDATE EM VIEWS COM JOIN, MAS NÃO É PERMITIDO FAZER DELETE E INSERT*/

/*ORDER BY*/

CREATE TABLE ALUNOS(
	NUMERO INT,
	NOME VARCHAR(30)
);

INSERT INTO ALUNOS VALUES('1', 'JOAO');
INSERT INTO ALUNOS VALUES('1', 'MARIA');
INSERT INTO ALUNOS VALUES('2', 'ZOE');
INSERT INTO ALUNOS VALUES('2', 'ANDRE');
INSERT INTO ALUNOS VALUES('3', 'CLARA');
INSERT INTO ALUNOS VALUES('1', 'CLARA');
INSERT INTO ALUNOS VALUES('4', 'MARCOS');
INSERT INTO ALUNOS VALUES('5', 'JANANNA');
INSERT INTO ALUNOS VALUES('6', 'MARCELO');
INSERT INTO ALUNOS VALUES('4', 'ANTONIO');
INSERT INTO ALUNOS VALUES('3', 'SARZO');

SELECT * FROM ALUNOS
ORDER BY NUMERO DESC; /*MAIOR PARA MENOR*/

SELECT * FROM ALUNOS
ORDER BY NUMERO ASC;

SELECT * FROM ALUNOS
ORDER BY 1; /*ESSE 1 É A COLUNA, NO CASO A PRIMEIRA COLUNA*/

/*ORDENANDO POR MAIS DE UMA COLUNA*/
SELECT * FROM ALUNOS
ORDER BY NUMERO, NOME;

SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL,'') AS 'EMAIL', 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C 
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE
ORDER BY NOME;

/*DELIMITADOR*/

DELIMITER $ /*MUDANDO O DELIMITADOR*/

SELECT * FROM V_RELATORIO;

/*STORED PROCEDURES*/

SELECT 'HENRIQUE';

DELIMITER $

CREATE PROCEDURE NOME()
BEGIN	
		QUALQUER PROGRAMAÇÃO;
END 
$

CREATE PROCEDURE NOME_EMPRESA()
BEGIN
		SELECT 'UNIVERSIDADE DOS DADOS' AS EMPRESA;
END
$

/*CHAMANDO UMA PROCEDURE*/

CALL NOME_EMPRESA()$

DELIMITER ;

CALL NOME_EMPRESA();

/*PROCEDURES COM PARAMETROS*/

SELECT 10+10 AS CONTA;

DELIMITER $

CREATE PROCEDURE CONTA()
BEGIN	
		SELECT 10+10 AS CONTA;
END 
$

CALL CONTA();

/*APAGANDO UMA PROCEDURE*/

DROP PROCEDURE CONTA;

CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN	
		SELECT NUMERO1 + NUMERO2 AS CONTA;
END 
$

CALL CONTA(100,50)$

/*PROCEDURES*/

CREATE DATABASE PROJETO;

USE PROJETO;

CREATE TABLE CURSOS(
	ID_CURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	HORAS INT(3) NOT NULL,
	VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS VALUES(NULL, 'JAVA',30,500.00);
INSERT INTO CURSOS VALUES(NULL, 'FUNDAMENTO DE BANCO DE DADOS',40,700.00);

DELIMITER #

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),P_HORAS INT(3),P_PRECO FLOAT(10,2))
BEGIN
	
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);
	
END
#

DELIMITER ;

CALL CAD_CURSO('BI SQL SERVER',35,3000.00);
CALL CAD_CURSO('POWER BI',40,3000.00);
CALL CAD_CURSO('FIREBIRD',20,3000.00);

/*CRIAR UMA PROCEDURE PARA CONSULTAR CURSOS*/

DELIMITER #

CREATE PROCEDURE CONSULTA_CURSO(P_NOME VARCHAR(30))
BEGIN
		
		SELECT * FROM CURSOS WHERE NOME = P_NOME;

END
#

/*FUNCOES DE AGREGACOES NUMERICAS*/

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL,'CARLOS','M',10.00,30.00,21.00);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO','M',52.00,78.00,23.00);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA','F',40.00,89.00,285.00);
INSERT INTO VENDEDORES VALUES(NULL,'ANDERSON','M',30.00,98.45,40.00);
INSERT INTO VENDEDORES VALUES(NULL,'CELIA','F',25.00,54.00,420.00);
INSERT INTO VENDEDORES VALUES(NULL,'ZINHA','M',14.00,25.00,43200);


/*MAX - TRAS O MAIOR VALOR DE UMA COLUNA*/
SELECT MAX(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDORES;

/*MIN TRAZ O VALOR MINIMO DE UMA COLUNA*/
SELECT MIN(FEVEREIRO) AS MIN_FEV
FROM VENDEDORES;

/*AVG - TRAZ O VALOR MEDIO DE UMA COLUNA*/
SELECT AVG(FEVEREIRO) AS MEDIA_FEV
FROM VENDEDORES;

/*VARIAS FUNCOES*/
SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
AVG(JANEIRO) AS  MEDIA_JAN
FROM VENDEDORES;

/*TRUNCATE*/
SELECT MAX(JANEIRO) AS MAX_JAN,
MIN(JANEIRO) AS MIN_JAN,
TRUNCATE(AVG(JANEIRO),2) AS  MEDIA_JAN
FROM VENDEDORES;

/*AGREGANDO COM SUM*/
SELECT SUM(JANEIRO) AS VENDAS_JAN
FROM VENDEDORES;

/*VENDAS POR SEXO*/
SELECT SEXO, SUM(MARCO) AS VENDAS_MARCO
FROM VENDEDORES
GROUP BY SEXO;

/*SUBQUERIES*/

/*VENDEDOR QUE VENDEU MENOS EM MARCO E SEU NOME*/
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

/*VENDEDOR QUE VENDEU MAIS EM MARCO E SEU NOME*/
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

/*QUEM VENDEU MAIS QUE A MEDIA DE MARCO*/
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

/*OPERACOES EM LINHA*/
SELECT 	NOME,
		JANEIRO,
		FEVEREIRO,
		MARCO,
		(JANEIRO+FEVEREIRO+MARCO) AS TOTAL,
		TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS MEDIA
		FROM VENDEDORES;
		
		
/*ALTERANDO TABELAS*/

CREATE TABLE TABELA(
	COLUNA1 VARCHAR(30),
	COLUNA2 VARCHAR(30),
	COLUNA3 VARCHAR(30)
);

/*ADICIONANDO UMA PK*/
ALTER TABLE TABELA
ADD PRIMARY KEY (COLUNA1);

/*ADICIONANDO UMA COLUNA SEM POSIÇÃO, ULTIMA POSICAO*/
ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);

/*ADICIONANDO UMA COLUNA COM POSIÇÃO*/
ALTER TABLE TABELA
ADD COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

/*MODIFICANDO O TIPO DE UM CAMPO*/
ALTER TABLE TABELA MODIFY COLUNA2 DATE NOT NULL

/*MUDANDO O NOME DE UMA TABELA*/
ALTER TABLE TABELA
RENAME PESSOA;

/**/
CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);

/*ADICIONANDO UMA FOREIGN KEY*/
ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

/*VERIFICAR AS CHAVES*/
SHOW CREATE TABLE TIME;

/*ORGANIZAÇÃO DE CHAVES*/

CREATE TABLE JOGADOR(
	IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30)	
);

CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	NOMETIME VARCHAR(30),
	ID_JOGADOR INT,
	FOREIGN KEY(ID_JOGADOR)
	REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES(NULL, 'GUERRERO');
INSERT INTO TIME VALUES(NULL, 'FLAMENGO',1)

SHOW CREATE TABLE JOGADOR;
SHOW CREATE TABLE TIMES;

/*ORGANIZANDO AS CHAVES*/

DROP TABLE ENDERECO;
DROP TABLE TELEFONE;
DROP TABLE CLIENTE;

CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,	
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY (IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

/*DICIONARIO DE DADOS*/

USE INFORMATION_SCHEMA;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
		TABLE_NAME AS "TABELA",
		CONSTRAINT_NAME AS "NOME DA REGRA",
		CONSTRAINT_TYPE AS "TIPO"
		FROM TABLE_CONSTRAINTS
		WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

/*APAGANDO AS CONSTRAINTS*/

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

/*OFICINA DO SEU JOSÉ*/

/*ESSE EU FIZ*/

CREATE DATABASE OFICINA

CREATE TABLE CLIENTE(
	IDCLIENTE INT AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT AUTO_INCREMENT,
	TIPO CHAR(3)
	TELEFONE VARCHAR(15)
	/*LIGAR CLIENTE NESSA TABELA*/
);

CREATE TABLE CARRO_MARCA(
	IDCARRO INT AUTO_INCREMENT,
	MARCA VARCHAR(30) NOT NULL,
	/*LIGAR O CLIENTE NESSA TABELA*/
);

CREATE TABLE CARRO_COR(

	COR INT NOT NULL
	
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY (IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT PK_TELEFONE
PRIMARY KEY (IDTELEFONE);

ALTER TABLE CARRO_MARCA ADD CONSTRAINT PK_CARRO_MARCA
PRIMARY KEY (IDCARRO)

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CARRO_MARCA ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CARRO_COR ADD CONSTRAINT FK_CARRO_COR
FOREIGN KEY (ID_CARRO) REFERENCES CARRO_MARCA(IDCARRO);


/*CORREÇÃO*/

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	ID_CARRO INT UNIQUE
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM ('RES','CEL','COM') NOT NULL,
	TELEFONE VARCHAR(15),
	ID_CLIENT INT
);


CREATE TABLE MARCA(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR(30) NOT NULL UNIQUE
);	

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR(30) NOT NULL,
	PLACA VARCHAR(10) NOT NULL UNIQUE,
	ID_MARCA INT
);

CREATE TABLE CARRO_COR(
	IDCOR INT PRIMARY KEY NOT NULL,
	COR INT NOT NULL	
);

CREATE TABLE COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY (ID_CARRO, ID_COR)
);

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY(ID_CLIENT)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO1
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO 
ADD CONSTRAINT FK_MARCA_CARRO
FOREIGN KEY (ID_MARCA)
REFERENCES MARCA(IDCARRO);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY (IDCOR)
REFERENCES CARRO(IDCARRO);

/*PREENCHER O BANCO COM NO MINIMO 10 CLIENTES*/



INSERT INTO MARCA VALUES (NULL,'KIA');

INSERT INTO CARRO VALUES (NULL, 'PICANTO','MFY5B65','1');

INSERT INTO CLIENTE VALUES(NULL,'BRUNO','M','1');

INSERT INTO CARRO_COR VALUES (NULL, 'PRETO')

INSERT INTO COR VALUES ('1','1')

/*ESTRUTURA DE UMA TRIGGER - ESQUELETO*/

CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA 
FOR EACH ROW (PARA CADA LINHA)
BEGIN

END

CREATE DATABASE AULA40;

USE DATABASE AULA40;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

/*CRIANDO A TRIGGER*/

DELIMITER $

CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO 
FOR EACH ROW 
BEGIN

	INSERT INTO BKP_USUARIO VALUES(NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);

END
$

INSERT INTO USUARIO VALUES (NULL, 'ANDRADE','ANDRADE2009','HEXACAMPEAO');

DELETE FROM USUARIO WHERE IDUSUARIO = 1$

SELECT * FROM BKP_USUARIO;

/*COMUNICAÇÃO ENTRE BANCOS*/

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTOS(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTOS(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE LOJA

INSERT INTO BACKUP.BKP_PRODUTOS VALUES(NULL,1000,'TESTE',0.00);

SELECT * FROM BACKUP.BKP_PRODUTOS;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTOS 
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTOS VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);
END
$

DELIMITER ;

INSERT INTO PRODUTOS VALUES(NULL,'LIVRO',50.00);
INSERT INTO PRODUTOS VALUES(NULL,'BOOK',5.00);
INSERT INTO PRODUTOS VALUES(NULL,'LIBRO',10.00);
INSERT INTO PRODUTOS VALUES(NULL,'LIVROS',15.00);

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTOS 
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTOS VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR);
END
$

DROP TRIGGER BACKUP_PRODUTO;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTOS 
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTOS VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);
END
$

INSERT INTO PRODUTOS VALUES(NULL,'LIVRO DE LIO',15.00);

SELECT * FROM BACKUP.BKP_PRODUTOS;

ALTER TABLE BACKUP.BKP_PRODUTOS
ADD EVENTO CHAR(1);

/*AJUSTANDO A TRIGGER PARA MOSTRAR O QUE FOI INSERIDO OU TIRADO*/

DROP TRIGGER BACKUP_PRODUTO_DELETE;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTOS 
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTOS VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'D'); /*ADICIONAMOS O D NO FINAL*/
END
$

DELIMITER $

DELETE FROM PRODUTOS WHERE IDPRODUTO = 4;

DROP TRIGGER BACKUP_PRODUTO;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTOS 
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTOS VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR,'I');
END
$

INSERT INTO PRODUTOS VALUES(NULL,'ZAP',19.00);

/*TRIGGER DE AUDITORIA*/

DELIMITER ;

DROP DATABASE LOJA;

DROP DATABASE BACKUP$

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTOS(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

INSERT INTO PRODUTOS VALUES(NULL,'LIVRO',50.00);
INSERT INTO PRODUTOS VALUES(NULL,'BOOK',5.00);
INSERT INTO PRODUTOS VALUES(NULL,'LIBRO',10.00);
INSERT INTO PRODUTOS VALUES(NULL,'LIVROS',15.00);

/*QUANDO*/
SELECT NOW();

/*QUEM*/
SELECT DATABASE BACKUP;

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTOS(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
	
);

USE LOJA;

INSERT INTO PRODUTOS VALUES(NULL,'LIVRO',50.00);
INSERT INTO PRODUTOS VALUES(NULL,'BOOK',5.00);
INSERT INTO PRODUTOS VALUES(NULL,'LIBRO',10.00);
INSERT INTO PRODUTOS VALUES(NULL,'LIVROS',15.00);

SELECT * FROM PRODUTOS;

DELIMITER $

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTOS
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTOS VALUES 
	(NULL, OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U');
END;
$


UPDATE PRODUTOS SET VALOR = '110' WHERE IDPRODUTO = 4

SELECT * FROM BACKUP.BKP_PRODUTOS;

/*AUTO RELACIONAMENTO*/

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY  (ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400,NULL);
INSERT INTO CURSOS VALUES(NULL,'BI',30,400,1);
INSERT INTO CURSOS VALUES(NULL,'RELATÓRIOS AVANÇADOS',15,400,2);
INSERT INTO CURSOS VALUES(NULL,'JAVA',12,400,NULL);


SELECT C.NOME, C.VALOR, C.HORAS, V.NOME
FROM CURSOS C
LEFT JOIN CURSOS V
ON C.IDCURSO = V.ID_PREREQ;

/*CURSORES*/

CREATE DATABASE CURSORES;

USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'MAFRA',32432,4545,2547);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA',5654,2424,2547);
INSERT INTO VENDEDORES VALUES(NULL,'JOÃO',32432,65656,2547);
INSERT INTO VENDEDORES VALUES(NULL,'ROGER',12121,4545,7878);
INSERT INTO VENDEDORES VALUES(NULL,'BRUCE',252525,4545,45454);

/*OPERAÇÃO EM LINHA*/
SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES;
SELECT NOME, (JAN+FEV+MAR) AS TOTAL, (JAN+FEV+MAR)/3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT
); 

DELIMITER $

CREATE PROCEDURE INSEREDADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
	DECLARE VNOME VARCHAR(50);

	DECLARE REG CURSOR FOR (
	SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
	);
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
	
	OPEN REG;
	
	REPEAT 
	
		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		IF NOT FIM THEN
		
			SET VTOTAL = VAR1 + VAR2 + VAR3;
			SET VMEDIA = VTOTAL / 3;
			
			INSERT INTO VEND_TOTAL VALUES (VNOME, VAR1, VAR2, VAR3, VTOTAL, VMEDIA);
			
		END IF;
		
	UNTIL FIM END REPEAT;
	
	CLOSE REG;
	
END
$

SELECT * FROM VENDEDORES;
SELECT * FROM VEND_TOTAL;

CALL INSEREDADOS ();

/*PRIMEIRA FORMA NORMAL

	UM CAMPO NÃO PODE SER DIVISIVEL
	UM CAMPO NÃO PODE SER VETORZADO

*/

CREATE DATABASE CONSULTORIO;

USE CONSULTORIO;


CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
);

CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE	
);  
						  

/* CRIANDO AS CONSTRAINTS - CORREÇÃO COD do OBJ (PK, FK) _ TABELA PERTENCENTE _ TABELA DE ONDE VEM*/

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);

